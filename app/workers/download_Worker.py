from PySide6.QtCore import QThread, Signal, QTime
import sys
import os
import re
import subprocess
import shutil
import tempfile
import stat
from app.ui_setting import resource_path


class DownloadVideo(QThread):
    message_signal = Signal(str, str)
    progress_signal = Signal(int)
    finished_signal = Signal(str)
    error_signal = Signal(str)
    stop_flag = False

    def __init__(self, url, video_index,
                 total_urls, worker_id,
                 video_mode, audio_only,
                 sub_mode, sub_lang, sub_lang_name, include_thumb,
                 subtitle_only, custom_folder_name=""):
        super().__init__()
        self.url = url
        self.video_index = video_index
        self.total_urls = total_urls
        self.worker_id = worker_id
        self.video_mode = video_mode
        self.audio_only = audio_only
        self.sub_mode = sub_mode
        self.sub_lang = sub_lang
        self.sub_lang_name = sub_lang_name
        self.include_thumb = include_thumb
        self.subtitle_only = subtitle_only
        self.custom_folder_name = custom_folder_name
        self.ffmpeg_path = resource_path(os.path.join("data", "ffmpeg.exe"))
        self.ytdlp_path = resource_path(os.path.join("data", "yt-dlp.exe"))
        self.stop_flag = False

        # T·∫°o th∆∞ m·ª•c t·∫°m cho download
        self.temp_dir = tempfile.mkdtemp(prefix="yt_download_")
        self.final_dir = custom_folder_name

        # print(self.url)
        # print(f" video_mode {self.video_mode}")
        # print(f" audio_only {self.audio_only}")
        # print(f" sub_mode {self.sub_mode}")
        # print(f" sub_lang {self.sub_lang}")
        # print(f" sub_lang_name {self.sub_lang_name}")
        # print(f" subtitle_only {self.subtitle_only}")
        # print(f" custom_folder_name {self.custom_folder_name}")
        # print(f" temp_dir {self.temp_dir}")

    def run(self):
        try:
            message_thread = f"[Thread {self.worker_id}] ({self.video_index}/{self.total_urls}) "
            if self.stop_flag:
                self.message_signal.emit(
                    f"{message_thread} ‚èπ ƒê√£ d·ª´ng tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu.", "")
                self._cleanup_temp()
                self.finished_signal.emit(f"stop")
                return

            creation_flags = 0
            if sys.platform == "win32":
                creation_flags = subprocess.CREATE_NO_WINDOW

            self.message_signal.emit(
                f"{message_thread} üîΩ B·∫Øt ƒë·∫ßu t·∫£i: {self.url}", ""
            )

            # L·∫•y ti√™u ƒë·ªÅ video
            ytdlp_path = "yt-dlp"

            if os.path.exists(self.ytdlp_path):
                ytdlp_path = self.ytdlp_path

            get_title_cmd = [ytdlp_path, "--encoding",
                             "utf-8", "--get-title", self.url]
            result = subprocess.run(get_title_cmd, capture_output=True,
                                    text=True, encoding="utf-8", creationflags=creation_flags)

            title = result.stdout.strip().replace("/", "-").replace("\\", "-")
            if not title:
                self.error_signal.emit(
                    f"{message_thread} Internet c·ªßa b·∫°n c√≥ v·∫•n ƒë·ªÅ. vui l√≤ng check l·∫°i!",)
                self._cleanup_temp()
                return
            self.message_signal.emit(
                f"{message_thread} üéØ Ti√™u ƒë·ªÅ: {title}", "")

            # Download v√†o th∆∞ m·ª•c t·∫°m
            output_filename = f"{self.video_index:02d}.{title}.%(ext)s"
            if self.video_mode == "Video":
                output_filename = f"{self.video_index:02d}.{title}.%(ext)s"
            else:
                output_filename = f"playlist.{self.video_index:02d}.{title}.%(ext)s"

            # ƒê∆∞·ªùng d·∫´n t·∫°m
            temp_output = os.path.join(self.temp_dir, output_filename)

            # ƒê∆∞·ªùng d·∫´n cu·ªëi c√πng
            final_output = os.path.join(self.final_dir, output_filename)

            download_cmd = self._build_command(ytdlp_path, temp_output)

            self.process = subprocess.Popen(
                download_cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                text=True,
                bufsize=1,
                encoding="utf-8",
                creationflags=creation_flags
            )

            for line in self.process.stdout:
                if self.stop_flag:
                    self.process.kill()
                    self.process.terminate()
                    self.message_signal.emit(
                        f"{message_thread} ‚èπ ƒê√£ d·ª´ng t·∫£i video.", "")
                    self._cleanup_temp()
                    self.finished_signal.emit(f"stop")
                    return

                if line.strip():
                    self.message_signal.emit(
                        f"{message_thread} {line.strip()}", "")
                    match = re.search(r"\[download\]\s+(\d{1,3}\.\d{1,2})%", line)
                    if match:
                        percent = float(match.group(1))
                        self.progress_signal.emit(int(percent))

            self.process.wait()

            # Ki·ªÉm tra xem download c√≥ th√†nh c√¥ng kh√¥ng
            if self.process.returncode != 0:
                self.error_signal.emit(
                    f"{message_thread} ‚ùå L·ªói khi t·∫£i video!")
                self._cleanup_temp()
                return

            self.progress_signal.emit(95)

            # T√¨m file ƒë√£ download trong th∆∞ m·ª•c t·∫°m
            downloaded_files = self._find_downloaded_files()
            if not downloaded_files:
                self.error_signal.emit(
                    f"{message_thread} ‚ùå Hi·ªán t·∫°i kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c download!"),
                self._cleanup_temp()
                self.finished_signal.emit(f"error_no_file")
            else:
                # Copy file t·ª´ th∆∞ m·ª•c t·∫°m ra th∆∞ m·ª•c cu·ªëi c√πng
                self.message_signal.emit(
                    f"{message_thread} üìÅ ƒêang copy file ra th∆∞ m·ª•c cu·ªëi c√πng...", "")

                success = self._copy_files_to_final(downloaded_files, title)
                if success:
                    # T√¨m t√™n file ch√≠nh ƒë·ªÉ hi·ªÉn th·ªã
                    main_file = self._find_main_file(downloaded_files)
                    if main_file:
                        self.message_signal.emit(
                            f"{message_thread} ‚úÖ Ho√†n th√†nh download v√† copy!", "")
                    else:
                        self.message_signal.emit(
                            f"{message_thread} ‚úÖ Ho√†n th√†nh download!", "")

                    # D·ªçn d·∫πp th∆∞ m·ª•c t·∫°m
                    self._cleanup_temp()
                    self.finished_signal.emit(f"success")
                else:
                    self.error_signal.emit(
                        f"{message_thread} ‚ùå L·ªói khi copy file!")
                    self._cleanup_temp()
                    self.finished_signal.emit(f"error_copy_file")
        finally:
            # Always attempt to remove temp dir
            self._cleanup_temp()

    def _find_downloaded_files(self):
        """T√¨m c√°c file ƒë√£ download trong th∆∞ m·ª•c t·∫°m"""
        files = []
        try:
            for item in os.listdir(self.temp_dir):
                item_path = os.path.join(self.temp_dir, item)
                if os.path.isfile(item_path):
                    files.append(item_path)
        except Exception as e:
            print(f"Error finding downloaded files: {e}")
        return files

    def _copy_files_to_final(self, temp_files, title):
        """Copy file t·ª´ th∆∞ m·ª•c t·∫°m ra th∆∞ m·ª•c cu·ªëi c√πng"""
        try:
            # ƒê·∫£m b·∫£o th∆∞ m·ª•c ƒë√≠ch t·ªìn t·∫°i
            os.makedirs(self.final_dir, exist_ok=True)

            copied_files = []
            for temp_file in temp_files:
                filename = os.path.basename(temp_file)
                final_file = os.path.join(self.final_dir, filename)
                # print(f"filename: {filename}")
                # Ki·ªÉm tra xem c√≥ n√™n copy file n√†y hay kh√¥ng d·ª±a tr√™n ch·∫ø ƒë·ªô download
                # if not self._should_copy_file(filename):
                #     continue

                # X·ª≠ l√Ω t·ª´ng lo·∫°i file c·ª• th·ªÉ
                if self._is_video_file(filename):
                    # File video - d√πng ffmpeg ƒë·ªÉ copy v·ªõi metadata
                    success = self._copy_video_file(temp_file, final_file)
                    if success:
                        copied_files.append(f"üé¨ Video: {filename}")
                elif self._is_audio_file(filename):
                    # File audio (mp3, wav, etc.) - d√πng ffmpeg ƒë·ªÉ copy
                    success = self._copy_audio_file(temp_file, final_file)
                    if success:
                        copied_files.append(f"üéµ Audio: {filename}")
                elif self._is_subtitle_file(filename):
                    # File ph·ª• ƒë·ªÅ - copy tr·ª±c ti·∫øp
                    success = self._copy_subtitle_file(temp_file, final_file)
                    if success:
                        copied_files.append(f"üìù Ph·ª• ƒë·ªÅ: {filename}")
                elif self._is_thumbnail_file(filename):
                    # File thumbnail - copy tr·ª±c ti·∫øp
                    success = self._copy_thumbnail_file(temp_file, final_file)
                    if success:
                        copied_files.append(f"üñºÔ∏è Thumbnail: {filename}")
                else:
                    # File kh√°c - copy tr·ª±c ti·∫øp
                    success = self._copy_other_file(temp_file, final_file)
                    if success:
                        copied_files.append(f"üìÑ File: {filename}")

            # Th√¥ng b√°o c√°c file ƒë√£ copy th√†nh c√¥ng
            if copied_files:
                self.message_signal.emit(
                    f"[Thread {self.worker_id}] ‚úÖ ƒê√£ copy th√†nh c√¥ng:\n" + "\n".join(copied_files), "")

            return True

        except Exception as e:
            print(f"Error copying files: {e}")
            return False

    def _should_copy_file(self, filename):
        """Ki·ªÉm tra xem c√≥ n√™n copy file n√†y hay kh√¥ng d·ª±a tr√™n ch·∫ø ƒë·ªô download"""
        # N·∫øu ch·ªâ t·∫£i ph·ª• ƒë·ªÅ, ch·ªâ copy file ph·ª• ƒë·ªÅ
        if self.subtitle_only:
            return self._is_subtitle_file(filename)

        # N·∫øu check "T·∫£i MP3": copy video + audio + thumbnail
        if self.audio_only:
            return (self._is_video_file(filename) or
                    self._is_audio_file(filename) or
                    self._is_thumbnail_file(filename))

        # N·∫øu ch·ªâ check "Bao g·ªìm ·∫£nh": copy video + thumbnail
        if self.include_thumb and not self.audio_only:
            return self._is_video_file(filename) or self._is_thumbnail_file(filename)

        # M·∫∑c ƒë·ªãnh: ch·ªâ copy video MP4
        return self._is_video_file(filename)

    def _copy_video_file(self, temp_file, final_file):
        """Copy file video v·ªõi ffmpeg"""
        try:
            if os.path.exists(self.ffmpeg_path):
                # D√πng ffmpeg ƒë·ªÉ copy v·ªõi metadata
                ffmpeg_cmd = [
                    self.ffmpeg_path,
                    "-i", temp_file,
                    "-c", "copy",  # Copy kh√¥ng re-encode
                    "-y",  # Ghi ƒë√® file n·∫øu c√≥
                    final_file
                ]

                creation_flags = 0
                if sys.platform == "win32":
                    creation_flags = subprocess.CREATE_NO_WINDOW

                result = subprocess.run(
                    ffmpeg_cmd,
                    capture_output=True,
                    creationflags=creation_flags
                )

                if result.returncode == 0:
                    return True

            # Fallback: copy th∆∞·ªùng n·∫øu ffmpeg th·∫•t b·∫°i ho·∫∑c kh√¥ng c√≥
            shutil.copy2(temp_file, final_file)
            return True

        except Exception as e:
            print(f"Error copying video file: {e}")
            return False

    def _copy_audio_file(self, temp_file, final_file):
        """Copy file audio v·ªõi ffmpeg"""
        try:
            if os.path.exists(self.ffmpeg_path):
                # D√πng ffmpeg ƒë·ªÉ copy v·ªõi metadata
                ffmpeg_cmd = [
                    self.ffmpeg_path,
                    "-i", temp_file,
                    "-c", "copy",  # Copy kh√¥ng re-encode
                    "-y",  # Ghi ƒë√® file n·∫øu c√≥
                    final_file
                ]

                creation_flags = 0
                if sys.platform == "win32":
                    creation_flags = subprocess.CREATE_NO_WINDOW

                result = subprocess.run(
                    ffmpeg_cmd,
                    capture_output=True,
                    creationflags=creation_flags
                )

                if result.returncode == 0:
                    return True

            # Fallback: copy th∆∞·ªùng n·∫øu ffmpeg th·∫•t b·∫°i ho·∫∑c kh√¥ng c√≥
            shutil.copy2(temp_file, final_file)
            return True

        except Exception as e:
            print(f"Error copying audio file: {e}")
            return False

    def _copy_subtitle_file(self, temp_file, final_file):
        """Copy file ph·ª• ƒë·ªÅ"""
        try:
            shutil.copy2(temp_file, final_file)
            return True
        except Exception as e:
            print(f"Error copying subtitle file: {e}")
            return False

    def _copy_thumbnail_file(self, temp_file, final_file):
        """Copy file thumbnail"""
        try:
            shutil.copy2(temp_file, final_file)
            return True
        except Exception as e:
            print(f"Error copying thumbnail file: {e}")
            return False

    def _copy_other_file(self, temp_file, final_file):
        """Copy file kh√°c"""
        try:
            shutil.copy2(temp_file, final_file)
            return True
        except Exception as e:
            print(f"Error copying other file: {e}")
            return False

    def _find_main_file(self, temp_files):
        """T√¨m file ch√≠nh (video ho·∫∑c audio) trong danh s√°ch file t·∫°m"""
        for temp_file in temp_files:
            filename = os.path.basename(temp_file)
            if self._is_video_file(filename) or self._is_audio_file(filename):
                return filename
        return None

    def _is_video_file(self, filename):
        """Ki·ªÉm tra xem file c√≥ ph·∫£i l√† video file kh√¥ng"""
        video_extensions = ['.mp4', '.mkv', '.avi',
                            '.mov', '.wmv', '.flv', '.webm', '.m4v']
        return any(filename.lower().endswith(ext) for ext in video_extensions)

    def _is_audio_file(self, filename):
        """Ki·ªÉm tra xem file c√≥ ph·∫£i l√† audio file kh√¥ng"""
        audio_extensions = ['.mp3', '.wav', '.aac',
                            '.ogg', '.m4a', '.flac', '.wma']
        return any(filename.lower().endswith(ext) for ext in audio_extensions)

    def _is_subtitle_file(self, filename):
        """Ki·ªÉm tra xem file c√≥ ph·∫£i l√† subtitle file kh√¥ng"""
        subtitle_extensions = ['.srt', '.vtt', '.ass', '.ssa', '.sub', '.idx']
        return any(filename.lower().endswith(ext) for ext in subtitle_extensions)

    def _is_thumbnail_file(self, filename):
        """Ki·ªÉm tra xem file c√≥ ph·∫£i l√† thumbnail file kh√¥ng"""
        image_extensions = ['.jpg', '.jpeg', '.png', '.webp', '.bmp', '.gif']
        return any(filename.lower().endswith(ext) for ext in image_extensions)

    def _cleanup_temp(self):
        """D·ªçn d·∫πp th∆∞ m·ª•c t·∫°m"""
        try:
            if hasattr(self, 'temp_dir') and os.path.exists(self.temp_dir):
                def _on_rm_error(func, path, exc_info):
                    try:
                        os.chmod(path, stat.S_IWRITE)
                        func(path)
                    except Exception:
                        pass
                shutil.rmtree(self.temp_dir, onerror=_on_rm_error)
        except Exception as e:
            print(f"Error cleaning up temp directory: {e}")

    def _build_command(self, ytdlp_path, output):
        """X√¢y d·ª±ng l·ªánh yt-dlp"""
        cmd = [ytdlp_path]
        cmd += ["--encoding", "utf-8"]
        cmd += [self.url, "--progress"]
        # Th√™m ƒë∆∞·ªùng d·∫´n ffmpeg n·∫øu t·ªìn t·∫°i
        if os.path.exists(self.ffmpeg_path):
            cmd += ["--ffmpeg-location", self.ffmpeg_path]

        # X·ª≠ l√Ω t·ª´ng ch·∫ø ƒë·ªô download c·ª• th·ªÉ
        if self.subtitle_only:
            # Ch·ªâ t·∫£i ph·ª• ƒë·ªÅ
            cmd.append("--skip-download")
            self.message_signal.emit("üìù Ch·∫ø ƒë·ªô: Ch·ªâ t·∫£i ph·ª• ƒë·ªÅ", "")
        else:
            # T·∫£i c·∫£ video MP4 v√† audio MP3
            cmd += ["-f", "bv*+ba/b", "--merge-output-format", "mp4"]

        if self.audio_only:
            cmd += ["--extract-audio", "--audio-format", "mp3", "--keep-video"]
            self.message_signal.emit("üé¨ Ch·∫ø ƒë·ªô: T·∫£i MP3", "")

        cmd += ["-o", output]

        # X·ª≠ l√Ω ph·ª• ƒë·ªÅ (ch·ªâ khi check "T·∫£i MP3" ho·∫∑c c√≥ y√™u c·∫ßu c·ª• th·ªÉ)
        if self.sub_mode != "":
            if self.sub_mode == "1":
                cmd += ["--write-subs", "--sub-langs", self.sub_lang]
                # self.message.emit(
                #     f"üî§ T·∫£i ph·ª• ƒë·ªÅ ch√≠nh th·ª©c cho ng√¥n ng·ªØ: {lang_display}")
            elif self.sub_mode == "2":
                cmd += ["--write-auto-subs", "--sub-langs", self.sub_lang]
                # self.message.emit(
                #     f"ü§ñ T·∫£i ph·ª• ƒë·ªÅ t·ª± ƒë·ªông cho ng√¥n ng·ªØ: {lang_display}")

            # Th√™m c√°c t√πy ch·ªçn ƒë·ªÉ ƒë·∫£m b·∫£o t·∫£i ƒë∆∞·ª£c ph·ª• ƒë·ªÅ
            cmd += [
                "--ignore-errors",           # B·ªè qua l·ªói n·∫øu m·ªôt ng√¥n ng·ªØ kh√¥ng c√≥
                "--no-warnings",            # Kh√¥ng hi·ªÉn th·ªã c·∫£nh b√°o
                "--sub-format", "srt/best",  # ∆Øu ti√™n ƒë·ªãnh d·∫°ng SRT
            ]

        cmd += ["--convert-subs", "srt"]

        # T·∫£i thumbnail n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
        if self.include_thumb:
            cmd.append("--write-thumbnail")

        # print(cmd)
        return cmd

    # def _update_progress_from_line(self, line):
    #     """C·∫≠p nh·∫≠t progress t·ª´ output line"""
    #     if "%" in line:
    #         try:
    #             percent_str = line.split(
    #                 "%", 1)[0].split()[-1].replace(".", "").strip()
    #             percent = int(percent_str)
    #             if 0 <= percent <= 100:
    #                 self.progress_signal.emit(percent)
    #         except:
    #             pass
