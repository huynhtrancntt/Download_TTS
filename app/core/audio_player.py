# -*- coding: utf-8 -*-
"""
Audio Player Class - Class t√°i s·ª≠ d·ª•ng ƒë·ªÉ ph√°t √¢m thanh
Cung c·∫•p c√°c ch·ª©c nƒÉng c∆° b·∫£n ƒë·ªÉ ph√°t, d·ª´ng, seek audio
"""

from PySide6.QtWidgets import QWidget, QVBoxLayout, QHBoxLayout, QPushButton, QLabel, QSlider, QCheckBox
from PySide6.QtCore import Qt, QTimer, Signal, QUrl
from PySide6.QtMultimedia import QMediaPlayer, QAudioOutput
from PySide6.QtGui import QKeyEvent, QShortcut
from typing import Optional, List, Tuple
import os
import time
from pydub import AudioSegment

from app.utils.audio_helpers import ms_to_mmss, get_mp3_duration_ms, hide_directory_on_windows


class ClickSlider(QSlider):
    """
    Slider c·∫£i ti·∫øn cho ph√©p click v√†o b·∫•t k·ª≥ v·ªã tr√≠ n√†o ƒë·ªÉ seek ngay l·∫≠p t·ª©c
    """
    clickedValue = Signal(int)

    def mousePressEvent(self, event) -> None:
        if event.button() in (Qt.LeftButton, Qt.RightButton):
            ratio = event.position().x() / max(1, self.width())
            ratio = max(0.0, min(1.0, ratio))
            vmin, vmax = self.minimum(), self.maximum()
            value = int(vmin + ratio * (vmax - vmin))
            self.setValue(value)
            self.clickedValue.emit(value)
        super().mousePressEvent(event)


class AudioPlayer(QWidget):
    """
    Class Audio Player c√≥ th·ªÉ t√°i s·ª≠ d·ª•ng
    Cung c·∫•p giao di·ªán v√† ch·ª©c nƒÉng ph√°t √¢m thanh c∆° b·∫£n
    """
    
    # Signals
    position_changed = Signal(int)  # V·ªã tr√≠ hi·ªán t·∫°i (ms)
    duration_changed = Signal(int)  # T·ªïng th·ªùi l∆∞·ª£ng (ms)
    playback_state_changed = Signal(bool)  # Tr·∫°ng th√°i ph√°t (True = ƒëang ph√°t)
    segment_changed = Signal(int)  # Segment hi·ªán t·∫°i
    timeline_clicked = Signal(int)  # Timeline ƒë∆∞·ª£c click t·∫°i v·ªã tr√≠ (ms)
    audio_split_requested = Signal(int, int)  # Y√™u c·∫ßu c·∫Øt audio (segment_index, split_position_ms)
    
    def __init__(self, parent=None):
        super().__init__(parent)
        
        # Kh·ªüi t·∫°o bi·∫øn tr·∫°ng th√°i
        self.segment_paths: List[Optional[str]] = []
        self.segment_durations: List[Optional[int]] = []
        self.total_known_ms: int = 0
        self.current_index: int = -1
        self.seeking: bool = False
        self.is_playing: bool = False
        
        # Gi√° tr·ªã seek pending
        self._pending_seek_value: Optional[int] = None
        self._last_seek_time: float = 0.0
        
        # L∆∞u tr·∫°ng th√°i audio tr∆∞·ªõc khi k√©o
        self._was_playing_before_seek: bool = False
        
        # Thi·∫øt l·∫≠p giao di·ªán
        self._setup_ui()
        
        # Thi·∫øt l·∫≠p h·ªá th·ªëng audio
        self._setup_audio_system()
        
        # Thi·∫øt l·∫≠p timer v√† k·∫øt n·ªëi t√≠n hi·ªáu
        self._setup_timers_and_connections()

    def _setup_ui(self):
        """Thi·∫øt l·∫≠p giao di·ªán c∆° b·∫£n"""
        layout = QVBoxLayout(self)
        
        # Player controls
        controls_layout = QHBoxLayout()
        
        self.btn_prev = QPushButton("‚èÆ")
        self.btn_prev.clicked.connect(self.play_prev)
        
        self.btn_playpause = QPushButton("‚ñ∂Ô∏è")
        self.btn_playpause.clicked.connect(self.toggle_playpause)
        
        self.btn_next = QPushButton("‚è≠")
        self.btn_next.clicked.connect(self.play_next)
        
        # Slider timeline
        self.slider = ClickSlider(Qt.Horizontal)
        self.slider.setRange(0, 0)
        
        # Label th·ªùi gian
        self.lbl_time = QLabel("00:00 / 00:00")
        
        # Checkbox l·∫∑p l·∫°i
        self.chk_loop = QCheckBox("üîÅ L·∫∑p l·∫°i")
        self.chk_loop.setChecked(True)
        
        # N√∫t c·∫Øt audio
        self.btn_split = QPushButton("‚úÇÔ∏è")
        self.btn_split.clicked.connect(self.split_audio_at_current_position)
        self.btn_split.setToolTip("C·∫Øt audio t·∫°i v·ªã tr√≠ hi·ªán t·∫°i")
        
        # Th√™m controls v√†o layout
        controls_layout.addWidget(self.btn_prev)
        controls_layout.addWidget(self.btn_playpause)
        controls_layout.addWidget(self.btn_next)
        controls_layout.addWidget(self.slider, 1)
        controls_layout.addWidget(self.lbl_time)
        controls_layout.addWidget(self.chk_loop)
        controls_layout.addWidget(self.btn_split)
        
        layout.addLayout(controls_layout)
        
        # Status label
        self.lbl_status = QLabel("S·∫µn s√†ng")
        self.lbl_status.setStyleSheet("color: #888; font-size: 12px; padding: 5px;")
        layout.addWidget(self.lbl_status)

    def _setup_audio_system(self):
        """Thi·∫øt l·∫≠p h·ªá th·ªëng audio"""
        self.audio_output = QAudioOutput()
        self.player = QMediaPlayer()
        self.player.setAudioOutput(self.audio_output)

    def _setup_timers_and_connections(self):
        """Thi·∫øt l·∫≠p timer v√† k·∫øt n·ªëi c√°c t√≠n hi·ªáu"""
        # Timer c·∫≠p nh·∫≠t timeline
        self.timer = QTimer(self)
        self.timer.setInterval(100)
        self.timer.timeout.connect(self.update_timeline)
        
        # Timer c·∫≠p nh·∫≠t v·ªã tr√≠ khi ƒëang k√©o slider
        self.seek_update_timer = QTimer(self)
        self.seek_update_timer.setInterval(50)  # C·∫≠p nh·∫≠t nhanh h∆°n khi k√©o
        self.seek_update_timer.timeout.connect(self.update_seek_position)
        
        # K·∫øt n·ªëi t√≠n hi·ªáu player
        self.player.mediaStatusChanged.connect(self.on_media_status_changed)
        self.player.errorOccurred.connect(self.on_media_error)
        self.player.positionChanged.connect(self.on_player_position_changed)
        self.player.playbackStateChanged.connect(self.on_playback_state_changed)
        
        # Timer debounce cho seek
        self.seek_debounce = QTimer(self)
        self.seek_debounce.setInterval(150)
        self.seek_debounce.setSingleShot(True)
        self.seek_debounce.timeout.connect(self.apply_seek_target)
        
        # K·∫øt n·ªëi slider signals
        self.slider.sliderPressed.connect(self.on_slider_pressed)
        self.slider.sliderMoved.connect(self.on_slider_moved)
        self.slider.sliderReleased.connect(self.on_slider_released)
        self.slider.clickedValue.connect(self.on_slider_clicked)
        
        # Thi·∫øt l·∫≠p ph√≠m t·∫Øt
        self._setup_shortcuts()

    def _setup_shortcuts(self):
        """Thi·∫øt l·∫≠p c√°c ph√≠m t·∫Øt cho audio player"""
        # Ph√≠m t·∫Øt Spacebar ƒë·ªÉ play/pause
        self.space_shortcut = QShortcut(Qt.Key_Space, self)
        self.space_shortcut.activated.connect(self.toggle_playpause)
        
        # Ph√≠m t·∫Øt Left Arrow ƒë·ªÉ previous
        self.left_shortcut = QShortcut(Qt.Key_Left, self)
        self.left_shortcut.activated.connect(self.play_prev)
        
        # Ph√≠m t·∫Øt Right Arrow ƒë·ªÉ next
        self.right_shortcut = QShortcut(Qt.Key_Right, self)
        self.right_shortcut.activated.connect(self.play_next)
        
        # Ph√≠m t·∫Øt Home ƒë·ªÉ v·ªÅ ƒë·∫ßu
        self.home_shortcut = QShortcut(Qt.Key_Home, self)
        self.home_shortcut.activated.connect(self.seek_to_beginning)
        
        # Ph√≠m t·∫Øt End ƒë·ªÉ v·ªÅ cu·ªëi
        self.end_shortcut = QShortcut(Qt.Key_End, self)
        self.end_shortcut.activated.connect(self.seek_to_end)
        
        # Ph√≠m t·∫Øt Up Arrow ƒë·ªÉ tƒÉng √¢m l∆∞·ª£ng
        self.up_shortcut = QShortcut(Qt.Key_Up, self)
        self.up_shortcut.activated.connect(self.volume_up)
        
        # Ph√≠m t·∫Øt Down Arrow ƒë·ªÉ gi·∫£m √¢m l∆∞·ª£ng
        self.down_shortcut = QShortcut(Qt.Key_Down, self)
        self.down_shortcut.activated.connect(self.volume_down)
        
        # Ph√≠m t·∫Øt M ƒë·ªÉ mute/unmute
        self.mute_shortcut = QShortcut(Qt.Key_M, self)
        self.mute_shortcut.activated.connect(self.toggle_mute)
        
        # Ph√≠m t·∫Øt Shift + Left ƒë·ªÉ rewind nhanh (10 gi√¢y)
        self.rewind_shortcut = QShortcut(Qt.Key_Left | Qt.ShiftModifier, self)
        self.rewind_shortcut.activated.connect(self.rewind_10s)
        
        # Ph√≠m t·∫Øt Shift + Right ƒë·ªÉ fast forward nhanh (10 gi√¢y)
        self.forward_shortcut = QShortcut(Qt.Key_Right | Qt.ShiftModifier, self)
        self.forward_shortcut.activated.connect(self.forward_10s)
        
        # Ph√≠m t·∫Øt Ctrl+S ƒë·ªÉ c·∫Øt audio
        self.split_shortcut = QShortcut(Qt.Key_S | Qt.ControlModifier, self)
        self.split_shortcut.activated.connect(self.split_audio_at_current_position)

    # ==================== Public Methods ====================
    
    def add_segments(self, paths: List[str], durations: List[int]):
        """Th√™m danh s√°ch segments"""
        self.segment_paths = paths.copy()
        self.segment_durations = durations.copy()
        self.total_known_ms = sum(d or 0 for d in self.segment_durations)
        self.slider.setRange(0, max(0, self.total_known_ms))
        self.update_time_label(0, self.total_known_ms)
        self.lbl_status.setText(f"ƒê√£ t·∫£i {len(paths)} segments")

    def clear_segments(self):
        """X√≥a t·∫•t c·∫£ segments"""
        self.stop()
        self.segment_paths.clear()
        self.segment_durations.clear()
        self.total_known_ms = 0
        self.current_index = -1
        self.slider.setRange(0, 0)
        self.update_time_label(0, 0)
        self.lbl_status.setText("S·∫µn s√†ng")

    def play(self):
        """B·∫Øt ƒë·∫ßu ph√°t"""
        if not self.segment_paths:
            return
        
        if self.current_index < 0:
            # B·∫Øt ƒë·∫ßu t·ª´ segment ƒë·∫ßu ti√™n
            self.play_segment(0, 0)
        else:
            # Ti·∫øp t·ª•c ph√°t
            self.player.play()
            self.is_playing = True
            self.btn_playpause.setText("‚èπ")
            self.timer.start()

    def stop(self):
        """D·ª´ng ph√°t"""
        self.player.stop()
        self.timer.stop()
        self.is_playing = False
        self.btn_playpause.setText("‚ñ∂Ô∏è")

    def pause(self):
        """T·∫°m d·ª´ng"""
        if self.is_playing:
            self.player.pause()
            self.timer.stop()
            self.is_playing = False
            self.btn_playpause.setText("‚ñ∂Ô∏è")

    def seek_to(self, global_ms: int):
        """Seek ƒë·∫øn v·ªã tr√≠ c·ª• th·ªÉ"""
        if not self.segment_paths:
            return
        
        self._pending_seek_value = global_ms
        self.apply_seek_target()

    def seek_to_beginning(self):
        """Seek v·ªÅ ƒë·∫ßu audio"""
        self.seek_to(0)

    def seek_to_end(self):
        """Seek v·ªÅ cu·ªëi audio"""
        if self.segment_paths:
            self.seek_to(max(0, self.total_known_ms - 1))

    def volume_up(self):
        """TƒÉng √¢m l∆∞·ª£ng"""
        current_volume = self.audio_output.volume()
        new_volume = min(1.0, current_volume + 0.1)
        self.audio_output.setVolume(new_volume)

    def volume_down(self):
        """Gi·∫£m √¢m l∆∞·ª£ng"""
        current_volume = self.audio_output.volume()
        new_volume = max(0.0, current_volume - 0.1)
        self.audio_output.setVolume(new_volume)

    def toggle_mute(self):
        """B·∫≠t/t·∫Øt √¢m thanh"""
        if self.audio_output.isMuted():
            self.audio_output.setMuted(False)
        else:
            self.audio_output.setMuted(True)

    def rewind_10s(self):
        """L√πi nhanh 10 gi√¢y"""
        current_pos = self.get_current_position()
        new_pos = max(0, current_pos - 10000)  # 10 gi√¢y = 10000ms
        self.seek_to(new_pos)

    def forward_10s(self):
        """Ti·∫øn nhanh 10 gi√¢y"""
        current_pos = self.get_current_position()
        new_pos = min(self.total_known_ms, current_pos + 10000)  # 10 gi√¢y = 10000ms
        self.seek_to(new_pos)

    def get_current_position(self) -> int:
        """L·∫•y v·ªã tr√≠ hi·ªán t·∫°i (ms)"""
        return self.get_global_position_ms()

    def get_total_duration(self) -> int:
        """L·∫•y t·ªïng th·ªùi l∆∞·ª£ng (ms)"""
        return self.total_known_ms

    def is_audio_playing(self) -> bool:
        """Ki·ªÉm tra xem c√≥ ƒëang ph√°t audio kh√¥ng"""
        return self.is_playing

    # ==================== Private Methods ====================
    
    def _should_start_loop(self) -> bool:
        """Ki·ªÉm tra xem c√≥ n√™n b·∫Øt ƒë·∫ßu loop hay kh√¥ng"""
        if not self.chk_loop.isChecked():
            return False
        
        current_global_pos = self.get_global_position_ms()
        return current_global_pos >= self.total_known_ms

    def _reset_seeking_flag(self):
        """Reset flag seeking sau khi seek ho√†n th√†nh"""
        self.seeking = False

    def get_global_position_ms(self) -> int:
        """L·∫•y v·ªã tr√≠ global hi·ªán t·∫°i (ms)"""
        if self.current_index < 0:
            return 0
        
        offset = sum((d or 0) for d in self.segment_durations[:self.current_index])
        current_pos = offset + self.player.position()
        return current_pos

    def update_time_label(self, cur_ms: int, total_ms: int):
        """C·∫≠p nh·∫≠t label hi·ªÉn th·ªã th·ªùi gian"""
        self.lbl_time.setText(f"{ms_to_mmss(cur_ms)} / {ms_to_mmss(total_ms)}")

    def play_segment(self, idx: int, pos_in_segment_ms: int = 0):
        """Ph√°t m·ªôt segment c·ª• th·ªÉ"""
        if idx < 0 or idx >= len(self.segment_paths):
            return
        
        path = self.segment_paths[idx]
        if not path:
            return
        
        # Ki·ªÉm tra v·ªã tr√≠ seek c√≥ h·ª£p l·ªá kh√¥ng
        segment_duration = self.segment_durations[idx] or 0
        if pos_in_segment_ms >= segment_duration:
            pos_in_segment_ms = max(0, segment_duration - 1)
        
        # C·∫≠p nh·∫≠t tr·∫°ng th√°i
        self.current_index = idx
        self.player.setSource(QUrl.fromLocalFile(path))
        self.player.setPosition(max(0, pos_in_segment_ms))
        self.player.play()
        self.timer.start()
        self.is_playing = True
        self.btn_playpause.setText("‚èπ")
        
        # Ph√°t signal
        self.segment_changed.emit(idx)

    def play_next(self):
        """Ph√°t segment ti·∫øp theo"""
        i = self.current_index + 1
        while i < len(self.segment_paths) and not self.segment_paths[i]:
            i += 1
        
        if i < len(self.segment_paths):
            self.play_segment(i, 0)
        else:
            # Ki·ªÉm tra loop
            if self._should_start_loop():
                idx0 = next((k for k, p in enumerate(self.segment_paths) if p), None)
                if idx0 is not None:
                    self.play_segment(idx0, 0)
                    return
            
            # Kh√¥ng c√≤n g√¨ ƒë·ªÉ ph√°t
            self.is_playing = False
            self.btn_playpause.setText("‚ñ∂Ô∏è")

    def play_prev(self):
        """Ph√°t segment tr∆∞·ªõc ƒë√≥"""
        i = self.current_index - 1
        while i >= 0 and not self.segment_paths[i]:
            i -= 1
        
        if i >= 0:
            self.play_segment(i, 0)
        else:
            self.player.setPosition(0)

    def toggle_playpause(self):
        """Toggle play/pause"""
        if not self.is_playing:
            if self.current_index < 0 and any(self.segment_paths):
                # B·∫Øt ƒë·∫ßu ph√°t t·ª´ segment ƒë·∫ßu ti√™n
                idx0 = next((i for i, p in enumerate(self.segment_paths) if p), None)
                if idx0 is not None:
                    self.play_segment(idx0, 0)
            else:
                # Ti·∫øp t·ª•c ph√°t
                self.play()
        else:
            # T·∫°m d·ª´ng
            self.pause()

    def split_audio_at_current_position(self):
        """C·∫Øt audio t·∫°i v·ªã tr√≠ hi·ªán t·∫°i"""
        if self.current_index < 0:
            return
        
        # L·∫•y v·ªã tr√≠ hi·ªán t·∫°i trong segment
        current_pos_in_segment = self.player.position()
        segment_duration = self.segment_durations[self.current_index] or 0
        
        # Ki·ªÉm tra v·ªã tr√≠ c·∫Øt c√≥ h·ª£p l·ªá kh√¥ng
        if current_pos_in_segment <= 0 or current_pos_in_segment >= segment_duration:
            return
        
        # L·∫•y th√¥ng tin segment ƒë·ªÉ hi·ªÉn th·ªã trong h·ªôp tho·∫°i x√°c nh·∫≠n
        segment_path = self.segment_paths[self.current_index]
        segment_name = os.path.basename(segment_path) if segment_path else "Unknown"
        current_time = ms_to_mmss(current_pos_in_segment)
        total_time = ms_to_mmss(segment_duration)
        
        # Hi·ªÉn th·ªã h·ªôp tho·∫°i x√°c nh·∫≠n
        from PySide6.QtWidgets import QMessageBox
        
        reply = QMessageBox.question(
            self, 
            "X√°c nh·∫≠n c·∫Øt audio",
            f"B·∫°n c√≥ mu·ªën c·∫Øt audio kh√¥ng?\n\n"
            f"File: {segment_name}\n"
            f"V·ªã tr√≠ c·∫Øt: {current_time}\n"
            f"Th·ªùi l∆∞·ª£ng g·ªëc: {total_time}\n\n"
            f"K·∫øt qu·∫£ s·∫Ω t·∫°o ra 2 file:\n"
            f"‚Ä¢ Ph·∫ßn 1: {current_time}\n"
            f"‚Ä¢ Ph·∫ßn 2: {ms_to_mmss(segment_duration - current_pos_in_segment)}",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )
        
        # Ch·ªâ c·∫Øt n·∫øu ng∆∞·ªùi d√πng x√°c nh·∫≠n
        if reply == QMessageBox.Yes:
            # Ph√°t signal y√™u c·∫ßu c·∫Øt audio
            # Tham s·ªë: segment_index, split_position_ms
            self.audio_split_requested.emit(self.current_index, current_pos_in_segment)

    def split_audio_file(self, segment_index: int, split_position_ms: int) -> Tuple[str, str]:
        """
        C·∫Øt audio file th√†nh 2 ph·∫ßn
        Returns: (path_part1, path_part2)
        """
        if segment_index < 0 or segment_index >= len(self.segment_paths):
            return None, None
        
        original_path = self.segment_paths[segment_index]
        if not original_path or not os.path.exists(original_path):
            return None, None
        
        try:
            # Load audio file
            audio = AudioSegment.from_file(original_path)
            
            # C·∫Øt th√†nh 2 ph·∫ßn
            part1 = audio[:split_position_ms]
            part2 = audio[split_position_ms:]
            
            # T·∫°o t√™n file m·ªõi
            base_name = os.path.splitext(os.path.basename(original_path))[0]
            dir_path = os.path.dirname(original_path)
            
            part1_path = os.path.join(dir_path, f"part1_{base_name}.mp3")
            part2_path = os.path.join(dir_path, f"part2_{base_name}.mp3")
            
            # Export 2 ph·∫ßn
            part1.export(part1_path, format="mp3")
            part2.export(part2_path, format="mp3")
            
            # ·∫®n file sau khi t·∫°o (ch·ªâ tr√™n Windows)
            for file_path in [part1_path, part2_path]:
                hide_directory_on_windows(file_path)
            
            return part1_path, part2_path
            
        except Exception as e:
            print(f"L·ªói khi c·∫Øt audio: {e}")
            return None, None

    def update_segments_after_split(self, segment_index: int, part1_path: str, part2_path: str, split_position_ms: int):
        """
        C·∫≠p nh·∫≠t segments list sau khi c·∫Øt audio
        """
        if segment_index < 0 or segment_index >= len(self.segment_paths):
            return
        
        original_duration = self.segment_durations[segment_index] or 0
        part1_duration = split_position_ms
        part2_duration = original_duration - split_position_ms
        
        # Thay th·∫ø segment c≈© b·∫±ng 2 ph·∫ßn m·ªõi
        self.segment_paths[segment_index] = part1_path
        self.segment_durations[segment_index] = part1_duration
        
        # Th√™m ph·∫ßn th·ª© 2 v√†o cu·ªëi
        self.segment_paths.append(part2_path)
        self.segment_durations.append(part2_duration)
        
        # C·∫≠p nh·∫≠t t·ªïng th·ªùi l∆∞·ª£ng
        self.total_known_ms = sum(d or 0 for d in self.segment_durations)
        
        # C·∫≠p nh·∫≠t slider range
        self.slider.setRange(0, max(0, self.total_known_ms))
        
        # C·∫≠p nh·∫≠t label th·ªùi gian
        self.update_time_label(self.get_current_position(), self.total_known_ms)

    def map_global_to_local(self, global_ms: int) -> Tuple[Optional[int], Optional[int]]:
        """Map v·ªã tr√≠ global v·ªÅ segment index v√† v·ªã tr√≠ local"""
        if not self.segment_durations or not any(self.segment_durations):
            return None, None
        
        # Gi·ªõi h·∫°n v·ªã tr√≠
        total_duration = sum(d or 0 for d in self.segment_durations)
        if global_ms >= total_duration:
            global_ms = total_duration - 1
        if global_ms < 0:
            global_ms = 0
        
        # T√¨m segment ch·ª©a v·ªã tr√≠ global
        acc = 0
        for i, d in enumerate(self.segment_durations):
            d = d or 0
            segment_start = acc
            segment_end = acc + d
            
            if segment_start <= global_ms < segment_end:
                local_pos = global_ms - segment_start
                return i, local_pos
            
            acc += d
        
        # Fallback: segment cu·ªëi c√πng
        last_idx = len(self.segment_durations) - 1
        last_dur = self.segment_durations[last_idx] or 0
        return last_idx, max(0, last_dur - 1)

    def apply_seek_target(self):
        """√Åp d·ª•ng seek ƒë·∫øn v·ªã tr√≠ m·ª•c ti√™u"""
        if self._pending_seek_value is None:
            return
        
        target = self._pending_seek_value
        self._pending_seek_value = None
        
        # Map v·ªã tr√≠ global v·ªÅ segment v√† v·ªã tr√≠ local
        idx, local = self.map_global_to_local(target)
        if idx is not None:
            # C·∫≠p nh·∫≠t slider position
            self.slider.blockSignals(True)
            self.slider.setValue(target)
            self.slider.blockSignals(False)
            
            # Ph√°t segment t·∫°i v·ªã tr√≠ local
            self.play_segment(idx, local)
            
            # C·∫≠p nh·∫≠t label th·ªùi gian
            self.update_time_label(target, self.total_known_ms)
            
            # ƒê·∫£m b·∫£o timer ƒë∆∞·ª£c kh·ªüi ƒë·ªông n·∫øu ƒëang ph√°t
            if self.is_playing:
                self.timer.start()
            
            # Gi·ªØ seeking flag l√¢u h∆°n
            QTimer.singleShot(1000, self._reset_seeking_flag)
        else:
            self.seeking = False

    def update_timeline(self):
        """C·∫≠p nh·∫≠t timeline d·ª±a tr√™n v·ªã tr√≠ hi·ªán t·∫°i"""
        if self.current_index < 0 or self.seeking:
            return
        
        # Ki·ªÉm tra th·ªùi gian seek cu·ªëi c√πng
        current_time = time.time()
        if current_time - self._last_seek_time < 2.0:
            return
        
        # T√≠nh v·ªã tr√≠ global
        offset = sum((d or 0) for d in self.segment_durations[:self.current_index])
        player_pos = self.player.position()
        current_pos = offset + player_pos
        
        # C·∫≠p nh·∫≠t slider
        self.slider.blockSignals(True)
        self.slider.setValue(current_pos)
        self.slider.blockSignals(False)
        
        # C·∫≠p nh·∫≠t label th·ªùi gian
        self.update_time_label(current_pos, self.total_known_ms)
        
        # Ph√°t signal
        self.position_changed.emit(current_pos)

    def update_seek_position(self):
        """C·∫≠p nh·∫≠t v·ªã tr√≠ th·ªùi gian khi ƒëang k√©o slider"""
        if not self.seeking or self._pending_seek_value is None:
            return
        
        # C·∫≠p nh·∫≠t label th·ªùi gian v·ªõi v·ªã tr√≠ ƒëang k√©o
        self.update_time_label(self._pending_seek_value, self.total_known_ms)

    # ==================== Slider Event Handlers ====================
    
    def on_slider_pressed(self):
        """Slider ƒë∆∞·ª£c nh·∫•n"""
        self.seeking = True
        self._last_seek_time = time.time()
        
        # L∆∞u tr·∫°ng th√°i audio tr∆∞·ªõc khi k√©o
        self._was_playing_before_seek = self.is_playing
        
        # D·ª´ng timer khi b·∫Øt ƒë·∫ßu k√©o ƒë·ªÉ tr√°nh xung ƒë·ªôt
        self.timer.stop()
        
        # D·ª´ng audio khi b·∫Øt ƒë·∫ßu k√©o
        if self.is_playing:
            self.player.pause()
        
        # Kh·ªüi ƒë·ªông timer c·∫≠p nh·∫≠t v·ªã tr√≠ khi k√©o
        self.seek_update_timer.start()

    def on_slider_moved(self, value: int):
        """Slider ƒë∆∞·ª£c k√©o"""
        self._pending_seek_value = value
        self.seek_debounce.start()
        
        if not self.seeking:
            self.seeking = True
            self._last_seek_time = time.time()
        
        # C·∫≠p nh·∫≠t timer v√† v·ªã tr√≠ th·ªùi gian ngay khi k√©o
        self.update_time_label(value, self.total_known_ms)
        
        # C·∫≠p nh·∫≠t v·ªã tr√≠ slider ƒë·ªÉ tr√°nh nh·∫£y v·ªÅ v·ªã tr√≠ c≈©
        self.slider.blockSignals(True)
        self.slider.setValue(value)
        self.slider.blockSignals(False)
        
        # Ph√°t signal position_changed ƒë·ªÉ c·∫≠p nh·∫≠t UI
        self.position_changed.emit(value)

    def on_slider_released(self):
        """Slider ƒë∆∞·ª£c th·∫£"""
        if self.seek_debounce.isActive():
            self.seek_debounce.stop()
            self.apply_seek_target()
        
        # D·ª´ng timer c·∫≠p nh·∫≠t v·ªã tr√≠ khi k√©o
        self.seek_update_timer.stop()
        
        # C·∫≠p nh·∫≠t timer ngay khi th·∫£ slider
        if self.is_playing:
            self.timer.start()
        
        # Kh·ªüi ƒë·ªông l·∫°i audio n·∫øu tr∆∞·ªõc ƒë√≥ ƒëang ph√°t
        if self._was_playing_before_seek:
            self.player.play()
        
        QTimer.singleShot(800, self._reset_seeking_flag)

    def on_slider_clicked(self, value: int):
        """Slider ƒë∆∞·ª£c click"""
        self.seeking = True
        self._last_seek_time = time.time()
        
        # L∆∞u tr·∫°ng th√°i audio tr∆∞·ªõc khi click
        self._was_playing_before_seek = self.is_playing
        
        # D·ª´ng timer c·∫≠p nh·∫≠t v·ªã tr√≠ khi k√©o
        self.seek_update_timer.stop()
        
        if not self.segment_durations or not any(self.segment_durations):
            self.seeking = False
            return
        
        self._pending_seek_value = value
        self.apply_seek_target()
        
        # Ph√°t signal timeline_clicked
        self.timeline_clicked.emit(value)
        
        QTimer.singleShot(800, self._reset_seeking_flag)

    # ==================== Media Player Callbacks ====================
    
    def on_media_status_changed(self, status):
        """Callback khi tr·∫°ng th√°i media thay ƒë·ªïi"""
        if status == QMediaPlayer.EndOfMedia:
            self.play_next()

    def on_media_error(self, err):
        """Callback khi c√≥ l·ªói media"""
        self.lbl_status.setText(f"‚ö†Ô∏è L·ªói ph√°t: {self.player.errorString() or str(err)}")
        self.play_next()

    def on_player_position_changed(self, pos_ms: int):
        """Callback khi v·ªã tr√≠ player thay ƒë·ªïi"""
        if not self.seeking:
            self.update_timeline()

    def on_playback_state_changed(self, state):
        """Callback khi tr·∫°ng th√°i playback thay ƒë·ªïi"""
        if state == QMediaPlayer.StoppedState:
            # Ki·ªÉm tra xem c√≥ ph·∫£i segment cu·ªëi c√πng kh√¥ng
            if self.current_index + 1 >= len(self.segment_paths):
                if self._should_start_loop():
                    self.play_next()
                    return
                
                # Kh√¥ng loop ho·∫∑c ch∆∞a ƒë·ªß ƒëi·ªÅu ki·ªán loop
                self.is_playing = False
                self.btn_playpause.setText("‚ñ∂Ô∏è")
        
        # Ph√°t signal
        self.playback_state_changed.emit(self.is_playing)
