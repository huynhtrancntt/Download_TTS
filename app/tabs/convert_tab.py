from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QLabel
)
from typing import Optional

from app.uiToolbarTab import UIToolbarTab
from app.history.historyItem_TTS import TTSHistoryItem
from app.historyPanelConvertTab import HistoryPanelTab


class ConvertTab(UIToolbarTab):
    """
    Tab Convert ƒë∆°n gi·∫£n ƒë·ªÉ minh h·ªça vi·ªác √°p d·ª•ng HistoryPanel cho m·ªói tab
    """

    def __init__(self, parent_main: QWidget) -> None:
        super().__init__(parent_main)

        self._setup_history()
        self._setup_ui()

    def _setup_history(self) -> None:
        """Enable per-tab history with its own panel and button"""
        self.enable_history(
            hist_title="L·ªãch s·ª≠ Convert",
            item_factory=lambda text, ts, meta: TTSHistoryItem(text, ts, meta),
            on_item_selected=self._on_history_selected,
            panel_cls=HistoryPanelTab,
            on_play=self._on_play,
            on_delete=self._on_delete,
            on_open_root=self._on_open_root
        )

        # ƒê∆∞a n√∫t l·ªãch s·ª≠ v√†o thanh toolbar c·ªßa tab
        if self.history:
            self.add_toolbar_widget(self.history.btn)

        # Kh√¥ng th√™m demo; s·∫Ω load khi m·ªü panel

    def _setup_ui(self) -> None:
        """Create simple content for the Convert tab"""
        root_layout: QVBoxLayout = self.layout()  # ƒê√£ c√≥ t·ª´ UIToolbarTab
        content = QLabel("N·ªôi dung Convert (demo). B·∫•m 'üïò L·ªãch s·ª≠' ƒë·ªÉ m·ªü panel b√™n ph·∫£i.")
        content.setWordWrap(True)
        root_layout.addWidget(content)

    def _on_history_selected(self, payload: Optional[dict] = None) -> None:
        """Handle click from a history item (if emitted by item widget)"""
        # TTSHistoryItem c√≥ signal selected(meta) ‚Äì ·ªü ƒë√¢y ta ch·ªâ in ra ho·∫∑c c√≥ th·ªÉ x·ª≠ l√Ω t√πy √Ω
        try:
            if payload is not None:
                print("[ConvertTab] Selected history payload:", payload)
        except Exception:
            pass

    def _on_play(self, payload):
        try:
            print("[ConvertTab] Play requested:", payload)
        except Exception:
            pass

    def _on_delete(self, index: int):
        try:
            print(f"[ConvertTab] Delete index: {index}")
        except Exception:
            pass

    def _on_open_root(self):
        try:
            print("[ConvertTab] Open root requested")
        except Exception:
            pass


