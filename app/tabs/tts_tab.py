from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QPushButton, QHBoxLayout,
    QLabel, QFrame, QTextEdit, QComboBox,
    QSlider, QSpinBox
)
from PySide6.QtCore import Qt
import sys
from datetime import datetime
from pathlib import Path
from typing import Optional, Callable, List, Tuple, Any

import os
import tempfile
from app.uiToolbarTab import UIToolbarTab
from app.appConfig import AppConfig

from app.history.historyItem_TTS import TTSHistoryItem

from ..constants import (
    VOICE_CHOICES, RATE_CHOICES, PITCH_CHOICES,
    DEFAULT_VOICE, DEFAULT_RATE, DEFAULT_PITCH, DEFAULT_MAXLEN, DEFAULT_WORKERS_PLAYER,
    DEFAULT_GAP_MS, OUTPUT_DIR
)


class TTSTab(UIToolbarTab):
    """Text-to-Speech tab with improved UI and functionality"""

    def __init__(self, parent_main: QWidget):
        super().__init__(parent_main)
        self._setup_ui()

    def append_history(self, text: str, meta: Optional[dict] = None):
        """Th√™m item v√†o l·ªãch s·ª≠ (TTS): ch·ªâ l∆∞u text + meta"""
        if self.history:
            self.history.panel.add_history(text, meta=meta or {})

    def _setup_ui(self):
        """Kh·ªüi t·∫°o to√†n b·ªô UI cho tab TTS"""
        root_layout = self.layout()
        self.file_output = ""

        # B·∫≠t khu v·ª±c L·ªãch s·ª≠ ƒë·ªÉ c√≥ n√∫t m·ªü panel l·ªãch s·ª≠
        hist = self.enable_history(
            hist_title="L·ªãch s·ª≠ TTS",
            item_factory=lambda text, ts, lang, meta: TTSHistoryItem(
                text, ts, lang, meta),
            on_item_selected=self._on_history_selected
        )

        # Demo history (c√≥ th·ªÉ xo√° sau)
        self.append_history("Xin ch√†o, t√¥i l√† tr·ª£ l√Ω AI ...", meta={
                            "demo": True, "priority": "high"})
        self.append_history("H√¥m nay th·ªùi ti·∫øt th·∫ø n√†o?", meta={
                            "demo": True, "priority": "normal"})

        # ===== Header ch·ª©a 2 h√†ng: tham s·ªë job + n√∫t m·ªü file/b·∫Øt ƒë·∫ßu/k·∫øt th√∫c
        header_layout = QHBoxLayout()
        header_layout.setContentsMargins(0, 0, 0, 0)
        # C√°c tham s·ªë job
        self.theard_edge_tts = QSpinBox()
        self.theard_edge_tts.setRange(1, 16)
        self.theard_edge_tts.setValue(DEFAULT_WORKERS_PLAYER)
        self.theard_edge_tts.setSuffix(" Theard")

        self.maxlen_spin_edge_tts = QSpinBox()
        self.maxlen_spin_edge_tts.setRange(80, 2000)
        self.maxlen_spin_edge_tts.setValue(DEFAULT_MAXLEN)
        self.maxlen_spin_edge_tts.setSuffix(" k√Ω t·ª±/ƒëo·∫°n")

        self.gap_spin_edge_tts = QSpinBox()
        self.gap_spin_edge_tts.setRange(0, 2000)
        self.gap_spin_edge_tts.setValue(DEFAULT_GAP_MS)
        self.gap_spin_edge_tts.setSuffix(" ms ngh·ªâ gh√©p")

        # D√†n 2 h√†ng trong header
        row_layout = QVBoxLayout()

        # H√†ng 1: tham s·ªë job + n√∫t m·ªü l·ªãch s·ª≠
        row1_layout = QHBoxLayout()
        row1_layout.addWidget(QLabel("Theard"))
        row1_layout.addWidget(self.theard_edge_tts)
        row1_layout.addWidget(self.maxlen_spin_edge_tts)
        row1_layout.addWidget(self.gap_spin_edge_tts)
        row1_layout.addStretch()
        row1_layout.addWidget(hist.btn)

        # H√†ng 2: m·ªü file + start/stop
        row2_layout = QHBoxLayout()
        row2_layout.setContentsMargins(0, 0, 0, 0)
        self.btn_open_edge_tts = QPushButton("üìÇ M·ªü file")
        row2_layout.addWidget(self.btn_open_edge_tts)
        row2_layout.addStretch()
        self.btn_start_edge_tts = QPushButton("‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu")
        self.btn_end_edge_tts = QPushButton("‚èπ K·∫øt th√∫c")
        self.btn_end_edge_tts.setEnabled(False)
        row2_layout.addWidget(self.btn_start_edge_tts)
        row2_layout.addWidget(self.btn_end_edge_tts)

        # Gh√©p 2 h√†ng v√†o header
        row_layout.addLayout(row1_layout)    # ƒë√∫ng: addLayout cho layout con
        row_layout.addLayout(row2_layout)
        header_layout.addLayout(row_layout)  # ƒë√∫ng: addLayout, kh√¥ng addWidget

        # ===== Content ch√≠nh (textbox + c·∫•u h√¨nh voice/rate + n√∫t ƒëi·ªÅu khi·ªÉn + status)
        content_layout = QVBoxLayout()
        content_layout.setContentsMargins(0, 0, 0, 0)

        # Text input
        self.text_input_edge_tts = QTextEdit(
            placeholderText="D√°n vƒÉn b·∫£n ho·∫∑c b·∫•m M·ªü .txt")
        self.text_input_edge_tts.setMinimumHeight(200)
        content_layout.addWidget(self.text_input_edge_tts, 2)

        # Ng√¥n ng·ªØ & Gi·ªõi t√≠nh
        self.cmb_lang = QComboBox()
        self.cmb_lang.setMinimumWidth(120)
        for label, code in [
            ("Vietnamese (vi)", "vi"), ("English US (en-US)", "en-US"),
            ("English UK (en-GB)", "en-GB"), ("Japanese (ja)", "ja"),
            ("Korean (ko)", "ko"), ("Chinese (zh-CN)", "zh-CN"),
            ("French (fr-FR)", "fr-FR"), ("German (de-DE)", "de-DE"),
            ("Spanish (es-ES)", "es-ES"),
        ]:
            self.cmb_lang.addItem(label, code)
        self.cmb_lang.setCurrentIndex(0)

        self.cmb_gender = QComboBox()
        self.cmb_gender.setMinimumWidth(80)
        self.cmb_gender.addItems(["Female", "Male", "Any"])
        self.cmb_gender.setCurrentText("Female")

        # ===== Sliders CHU·∫®N H√ìA T√äN/√ù NGHƒ®A =====
        # T·ªëc ƒë·ªô (speed multiplier): 0.5x ‚Üí 2.0x (range 50..200), hi·ªÉn th·ªã 0.5..2.0
        self.speed_slider = QSlider(Qt.Horizontal)
        self.speed_slider.setRange(50, 200)
        self.speed_slider.setValue(100)             # 1.0x m·∫∑c ƒë·ªãnh
        self.speed_slider.setTickInterval(10)
        self.speed_slider.setTickPosition(QSlider.TicksBelow)
        self.speed_slider.setSingleStep(1)
        self.speed_slider.setPageStep(10)
        # T·∫°o label TR∆Ø·ªöC khi connect
        self.lbl_speed_val = QLabel("1.0")
        self.speed_slider.valueChanged.connect(
            lambda v: self.lbl_speed_val.setText(f"{v/100:.1f}")
        )

        # Cao ƒë·ªô (pitch multiplier quanh 1.0): -50..+50% ‚Üí hi·ªÉn th·ªã 0.5..1.5
        self.pitch_slider = QSlider(Qt.Horizontal)
        self.pitch_slider.setRange(-50, 50)
        self.pitch_slider.setValue(0)               # +0% = 1.0
        self.pitch_slider.setTickInterval(10)
        self.pitch_slider.setTickPosition(QSlider.TicksBelow)
        self.lbl_pitch_val = QLabel("1.0")
        self.pitch_slider.valueChanged.connect(
            lambda v: self.lbl_pitch_val.setText(f"{1 + v/100:.1f}")
        )

        # Nh√≥m c·∫•u h√¨nh (ng√¥n ng·ªØ/gi·ªõi t√≠nh/t·ªëc ƒë·ªô/cao ƒë·ªô)
        row_box = QVBoxLayout()

        row_b1_layout = QHBoxLayout()
        row_b1_layout.setContentsMargins(0, 5, 0, 5)
        row_b1_layout.addWidget(QLabel("Ng√¥n ng·ªØ"))
        row_b1_layout.addWidget(self.cmb_lang)
        row_b1_layout.addWidget(QLabel("Gi·ªõi t√≠nh"))
        row_b1_layout.addWidget(self.cmb_gender)
        row_b1_layout.addStretch()

        row_b1_layout.addWidget(QLabel("T·ªëc ƒë·ªô:"))
        row_b1_layout.addWidget(self.speed_slider, 1)
        row_b1_layout.addWidget(self.lbl_speed_val)

        row_b1_layout.addSpacing(12)
        row_b1_layout.addWidget(QLabel("Cao ƒë·ªô:"))
        row_b1_layout.addWidget(self.pitch_slider, 1)
        row_b1_layout.addWidget(self.lbl_pitch_val)

        # H√†ng n√∫t ƒëi·ªÅu khi·ªÉn
        row_b2_layout = QHBoxLayout()
        row_b2_layout.setContentsMargins(0, 5, 0, 5)
        buttons_layout = QHBoxLayout()
        self.btn_say = QPushButton(" üîä Chuy·ªÉn ƒë·ªïi")
        self.btn_save = QPushButton("üíæ L∆∞u")
        self.btn_stop = QPushButton("‚èπÔ∏è D·ª´ng")
        self.btn_clear_chunks = QPushButton("üóëÔ∏è X√≥a Chunks")
        for btn in (self.btn_say, self.btn_save, self.btn_stop, self.btn_clear_chunks):
            btn.setStyleSheet(AppConfig.BUTTON_STYLE)
            btn.setMinimumWidth(80)
            btn.setMaximumWidth(120)
            buttons_layout.addWidget(btn)
        buttons_layout.addStretch()
        # ‚úÖ addLayout (ƒë√∫ng), KH√îNG d√πng addWidget
        row_b2_layout.addLayout(buttons_layout)

        # Label tr·∫°ng th√°i
        self.lbl_status = QLabel("S·∫µn s√†ng.")
        self.lbl_status.setStyleSheet(
            "color: #888; font-size: 12px; padding: 5px;")

        # Gh√©p c√°c ph·∫ßn v√†o content
        row_box.addLayout(row_b1_layout)
        row_box.addLayout(row_b2_layout)
        content_layout.addLayout(row_box)
        content_layout.addStretch()
        content_layout.addWidget(self.lbl_status)
        self.text_input_edge_tts1 = QTextEdit(
            placeholderText="D√°n vƒÉn b·∫£n ho·∫∑c b·∫•m M·ªü .txt")
        self.text_input_edge_tts1.setMinimumHeight(200)
        # content_layout.addWidget(self.text_input_edge_tts1, 2)
        # Th√™m v√†o root THEO TH·ª® T·ª∞ (tr√°nh insertLayout v·ªõi index c·ª©ng 0/1)
        root_layout.addLayout(header_layout)
        root_layout.addLayout(content_layout)
        # root_layout.insertLayout(0, header_layout)
        # root_layout.insertLayout(1, content_layout)

        # layout = QVBoxLayout(self)
        # layout.setContentsMargins(0, 0, 0, 0)
        # layout.addLayout(root_layout)
        # root_layout.addLayout(self.history_layout)

        # K·∫øt n·ªëi s·ª± ki·ªán (ƒë·∫∑t sau khi UI s·∫µn s√†ng)
        # self.btn_say.clicked.connect(self._on_say_clicked)
        # self.btn_save.clicked.connect(self._on_save_clicked)
        # self.btn_stop.clicked.connect(self._on_stop_clicked)
        # self.btn_clear_chunks.clicked.connect(self._on_clear_chunks_clicked)

        # C·∫≠p nh·∫≠t status bar c·ªßa c·ª≠a s·ªï cha (n·∫øu c√≥)
        if getattr(self.parent_main, "status", None):
            self.parent_main.status.showMessage("TTS Tab s·∫µn s√†ng")

    # ==== Callback khi ch·ªçn item l·ªãch s·ª≠ ====
    def _on_history_selected(self, text: str):
        """Khi click ch·ªçn 1 item l·ªãch s·ª≠: ƒë·ªï text v·ªÅ √¥ nh·∫≠p hi·ªán t·∫°i"""
        # S·ª≠a l·ªói: ƒë√∫ng t√™n widget l√† text_input_edge_tts (tr∆∞·ªõc ƒë√¢y code d√πng self.text_input l√† sai)
        self.text_input_edge_tts.setPlainText(text)
        self.text_input_edge_tts.setFocus()
