# -*- coding: utf-8 -*-
"""
Workers cho x·ª≠ l√Ω TTS ƒëa lu·ªìng
Ch·ª©a c√°c worker class ƒë·ªÉ x·ª≠ l√Ω text-to-speech song song v√† batch processing
"""

import os
import tempfile
from datetime import datetime
import time
import random
from pathlib import Path
from concurrent.futures import ThreadPoolExecutor, as_completed
from typing import Optional, List

from PySide6.QtCore import QThread, Signal

from app.core.config import AppConfig
from app.utils.helps import split_text, tts_sync_save, save_log_entry, group_by_char_limit_with_len
from app.utils.audio_helpers import get_mp3_duration_ms
from app.utils.helps import hide_directory_on_windows
from app.utils.historyLog import save_history_log
import json
import uuid
from app.ui_setting import resource_path
import subprocess
import re
PROGRESS_RE = re.compile(r"\[download\]\s+(\d{1,3}(?:\.\d{1,2})?)%")
class NTDownloadWorker(QThread):
    """
    Worker ƒëa lu·ªìng cho vi·ªác t·∫°o audio TTS
    X·ª≠ l√Ω vƒÉn b·∫£n song song v√† ph√°t theo ƒë√∫ng th·ª© t·ª±

    Signals:
        segment_ready: Ph√°t khi m·ªôt ƒëo·∫°n audio ƒë∆∞·ª£c t·∫°o xong (path, duration_ms, index)
        progress: Ti·∫øn tr√¨nh x·ª≠ l√Ω (completed, total)
        status: Th√¥ng b√°o tr·∫°ng th√°i
        all_done: Ho√†n th√†nh t·∫•t c·∫£
        error: C√≥ l·ªói x·∫£y ra
    """

    # ƒê·ªãnh nghƒ©a c√°c signals
    segment_ready = Signal(str, str)  # path, duration_ms, index1
    progress = Signal(int, int)            # completed, total
    status = Signal(str)                   # status message
    all_done = Signal()                    # all processing done
    error = Signal(str)                    # error message

    def __init__(self, text: str, voice: str, rate: int, pitch: int, max_len: int, workers: int) -> None:
        """
        Kh·ªüi t·∫°o worker TTS ƒëa lu·ªìng

        Args:
            text: VƒÉn b·∫£n c·∫ßn chuy·ªÉn ƒë·ªïi
            voice: Gi·ªçng n√≥i (v√≠ d·ª•: "vi-VN-HoaiMyNeural")
            rate: T·ªëc ƒë·ªô (-50 ƒë·∫øn 50)
            pitch: Cao ƒë·ªô (-12 ƒë·∫øn 12)
            max_len: ƒê·ªô d√†i t·ªëi ƒëa m·ªói ƒëo·∫°n (k√Ω t·ª±)
            workers: S·ªë lu·ªìng x·ª≠ l√Ω song song
        """
        super().__init__()

        # Tham s·ªë TTS
        self.text: str = "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        # self.text: str = "https://www.youtube.com/watch?v=dQw4w9WgXcQ\nhttps://www.youtube.com/watch?v=dQw4w9WgXcQ\nhttps://www.youtube.com/watch?v=dQw4w9WgXcQ"
        self.voice: str = voice
        self.rate: int = rate
        self.pitch: int = pitch
        self.max_len: int = max_len
        self.workers: int = max(1, workers)  # T·ªëi thi·ªÉu 1 worker
        self.group_max_items: int = 10      # NEW: t·ªëi ƒëa bao nhi√™u √Ω/nh√≥m
        self.group_sep: str = " | "
        # Tr·∫°ng th√°i worker
        self.stop_flag: bool = False
        self.tmpdir: Optional[str] = None
        self.video_mode: str = "Video"
        self.ffmpeg_path: str = resource_path(os.path.join("data", "ffmpeg.exe"))
        self.ytdlp_path: str = resource_path(os.path.join("data", "yt-dlp.exe"))
        self.subtitle_only: bool = False
        self.audio_only: bool = False
        self.sub_mode: str = "1"
        self.sub_lang: str = "vi"
        self.include_thumb: bool = False

    def stop(self) -> None:
        """
        D·ª´ng worker (set flag ƒë·ªÉ c√°c thread con d·ª´ng)
        """
        self.stop_flag = True

    def run(self) -> None:

        try:
            # Ki·ªÉm tra vƒÉn b·∫£n ƒë·∫ßu v√†o
            if not self.text.strip():
                self.error.emit("‚ùå Ch∆∞a c√≥ n·ªôi dung vƒÉn b·∫£n ƒë·ªÉ x·ª≠ l√Ω.")
                return
            chunks = [u.strip() for u in self.text.splitlines() if u.strip()]
            print(chunks)
            # chunks = [chunk for (chunk, _len_) in grouped]
            total = len(chunks)
            if total == 0:
                self.error.emit("‚ùå Kh√¥ng th·ªÉ t√°ch vƒÉn b·∫£n th√†nh c√°c ƒëo·∫°n.")
                return

            # self.tmpdir = Path(tempfile.mkdtemp(prefix=AppConfig.TEMP_PREFIX))

            self.status.emit(
                f"üöÄ B·∫Øt ƒë·∫ßu sinh {total} ƒëo·∫°n audio b·∫±ng {self.workers} lu·ªìng...")

            # Kh·ªüi t·∫°o bi·∫øn theo d√µi ti·∫øn tr√¨nh
            # Dict l∆∞u k·∫øt qu·∫£ ƒë√£ ho√†n th√†nh {index: (path, duration)}
            completed = {}
            next_index = 1  # Index ti·∫øp theo c·∫ßn emit
            emitted = 0     # S·ªë ƒëo·∫°n ƒë√£ emit

            def job(index1: int, content: str) -> tuple:

                try:
                    
                    if not os.path.exists(self.ytdlp_path):
                        self.ytdlp_path = "yt-dlp"

                    get_title_cmd = [
                        self.ytdlp_path,
                        "--encoding", "utf-8",
                        "--get-title", content,
                        "--no-warnings",
                        "--no-check-certificate",
                    ]
                    result = subprocess.run(
                        get_title_cmd,
                        capture_output=True,
                        text=True,
                        encoding="utf-8",
                    )

                    if result.returncode != 0:
                        raise Exception(result.stderr.strip() or "yt-dlp failed to get title")

                    title = result.stdout.strip().splitlines()[0] if result.stdout else ""

                    output_filename = f"{index1:02d}.{title}.%(ext)s"
                    if self.video_mode != "Video":
                        output_filename = f"playlist.{index1:02d}.{title}.%(ext)s"
                    # print(f"output_filename {output_filename}")
                    self.tmpdir = Path(tempfile.mkdtemp(prefix="yt_download_"))
                    self.tmpdir = self.tmpdir / str(uuid.uuid4())
                    temp_output = self.tmpdir / output_filename  # Path object
                    print(f"temp_output {temp_output}")
                    download_cmd = self._build_command(self.ytdlp_path, temp_output, content)
                    # print(f"download_cmd {download_cmd}")
                    self.process = subprocess.Popen(
                        download_cmd,
                        stdout=subprocess.PIPE,
                        stderr=subprocess.STDOUT,
                        stdin=subprocess.DEVNULL,
                        text=True,
                        bufsize=1,
                        encoding="utf-8",
                        creationflags=0
                    )


                    for line in self.process.stdout:
                        if self.stop_flag:
                            self.process.kill()
                            self.process.terminate()
                            self.status.emit("‚èπ ƒê√£ d·ª´ng theo y√™u c·∫ßu ng∆∞·ªùi d√πng.")
                            return

                        if line.strip():
                        
                        
                            match = PROGRESS_RE.search(line)
                            if match:
                                percent = int(float(match.group(1)))
                                # self.status.emit(f"{percent}%")
                    # temp_output = os.path.join(self.temp_dir, output_filename)

                    return (index1,content, title,temp_output)
                except Exception as e:
                    raise Exception(f"L·ªói x·ª≠ l√Ω ƒëo·∫°n {index1}: {str(e)}")

            # X·ª≠ l√Ω ƒëa lu·ªìng theo batch ƒë·ªÉ tr√°nh treo v√† rate-limit
            with ThreadPoolExecutor(max_workers=self.workers) as executor:
                batch_size = 150
                for batch_start in range(0, total, batch_size):
                    if self.stop_flag:
                        self.status.emit("‚èπ ƒê√£ d·ª´ng theo y√™u c·∫ßu ng∆∞·ªùi d√πng.")
                        break

                    batch_end = min(total, batch_start + batch_size)
                    # Submit batch hi·ªán t·∫°i
                    futures = [executor.submit(job, i + 1, chunks[i])
                               for i in range(batch_start, batch_end)]

                    # X·ª≠ l√Ω k·∫øt qu·∫£ c·ªßa batch
                    for future in as_completed(futures):
                        if self.stop_flag:
                            self.status.emit(
                                "‚èπ ƒê√£ d·ª´ng theo y√™u c·∫ßu ng∆∞·ªùi d√πng.")
                            break

                        try:
                            idx1, url, title, temp_output = future.result()
                            completed[idx1] = (url, title)
                        except Exception as e:
                            self.status.emit(f"‚ö†Ô∏è {str(e)}")
                            continue

                        # Emit c√°c ƒëo·∫°n theo ƒë√∫ng th·ª© t·ª± (status + progress)
                        while next_index in completed:
                            url, title = completed.pop(next_index)
                            self.segment_ready.emit(url, title)
                            emitted += 1
                            self.progress.emit(emitted, total)
                            next_index += 1

                    if self.stop_flag:
                        break

                    # N·∫øu c√≤n batch k·∫ø ti·∫øp, ngh·ªâ ng·∫´u nhi√™n 500-700s nh∆∞ y√™u c·∫ßu
                    if batch_end < total:
                        delay_sec = random.randint(10, 20)
                        # self.status.emit(
                        #     f"‚è≥ T·∫°m d·ª´ng {delay_sec}s ƒë·ªÉ tr√°nh gi·ªõi h·∫°n h·ªá th·ªëng, s·∫Ω ti·∫øp t·ª•c sau‚Ä¶"
                        # )
                        remaining_ms = delay_sec * 1000
                        # Ng·ªß theo b∆∞·ªõc nh·ªè ƒë·ªÉ c√≥ th·ªÉ d·ª´ng s·ªõm n·∫øu ng∆∞·ªùi d√πng b·∫•m d·ª´ng
                        while remaining_ms > 0 and not self.stop_flag:
                            step = min(200, remaining_ms)
                            self.msleep(step)
                            remaining_ms -= step

            # Emit c√°c ƒëo·∫°n c√≤n l·∫°i (n·∫øu c√≥)
            while not self.stop_flag and next_index in completed:
                url, title = completed.pop(next_index)
                self.segment_ready.emit(url, title)
                emitted += 1
                self.progress.emit(emitted, total)
                next_index += 1

            if not self.stop_flag:

                self.all_done.emit()

        except Exception as e:
            self.error.emit(f"‚ùå L·ªói nghi√™m tr·ªçng: {str(e)}")




    # Remove duplicate legacy helpers below (kept single implementations above)
    def _build_command(self, ytdlp_path, output, url):
        """X√¢y d·ª±ng l·ªánh yt-dlp"""
        cmd = [ytdlp_path]
        cmd += ["--encoding", "utf-8"]
        cmd += [url, "--progress", "--newline"]
        # Th√™m ƒë∆∞·ªùng d·∫´n ffmpeg n·∫øu t·ªìn t·∫°i
        if os.path.exists(self.ffmpeg_path):
            cmd += ["--ffmpeg-location", self.ffmpeg_path]

        # X·ª≠ l√Ω t·ª´ng ch·∫ø ƒë·ªô download c·ª• th·ªÉ
        if self.subtitle_only:
            # Ch·ªâ t·∫£i ph·ª• ƒë·ªÅ
            cmd.append("--skip-download")
            self.message_signal.emit("üìù Ch·∫ø ƒë·ªô: Ch·ªâ t·∫£i ph·ª• ƒë·ªÅ", "")
        else:
            # T·∫£i c·∫£ video MP4 v√† audio MP3
            cmd += ["-f", "bv*+ba/b", "--merge-output-format", "mp4"]

        if self.audio_only:
            cmd += ["--extract-audio", "--audio-format", "mp3", "--keep-video"]
            self.message_signal.emit("üé¨ Ch·∫ø ƒë·ªô: T·∫£i MP3", "")

        cmd += ["-o", output]

        # ƒê·∫∑t timeout/k·ªãch b·∫£n retry ƒë·ªÉ tr√°nh treo khi m·∫°ng ch·∫≠p ch·ªùn
        # cmd += [
        #     "--socket-timeout", "15",
        #     "--retries", "3",
        #     "--fragment-retries", "3",
        #     "--retry-sleep", "3",
        #     "--no-warnings",
        #     "--no-continue",
        #     "--sleep-requests", "3",
        #     "--max-sleep-interval", "6",
        # ]

        # X·ª≠ l√Ω ph·ª• ƒë·ªÅ (ch·ªâ khi check "T·∫£i MP3" ho·∫∑c c√≥ y√™u c·∫ßu c·ª• th·ªÉ)
        if self.sub_mode != "":
            if self.sub_mode == "1":
                cmd += ["--write-subs", "--sub-langs", self.sub_lang]
                # self.message.emit(
                #     f"üî§ T·∫£i ph·ª• ƒë·ªÅ ch√≠nh th·ª©c cho ng√¥n ng·ªØ: {lang_display}")
            elif self.sub_mode == "2":
                cmd += ["--write-auto-subs", "--sub-langs", self.sub_lang]
                # self.message.emit(
                #     f"ü§ñ T·∫£i ph·ª• ƒë·ªÅ t·ª± ƒë·ªông cho ng√¥n ng·ªØ: {lang_display}")

            # Th√™m c√°c t√πy ch·ªçn ƒë·ªÉ ƒë·∫£m b·∫£o t·∫£i ƒë∆∞·ª£c ph·ª• ƒë·ªÅ
            cmd += [
                "--ignore-errors",           # B·ªè qua l·ªói n·∫øu m·ªôt ng√¥n ng·ªØ kh√¥ng c√≥
                "--no-warnings",            # Kh√¥ng hi·ªÉn th·ªã c·∫£nh b√°o
                "--sub-format", "srt/best",  # ∆Øu ti√™n ƒë·ªãnh d·∫°ng SRT
            ]

        cmd += ["--convert-subs", "srt"]

        # T·∫£i thumbnail n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
        if self.include_thumb:
            cmd.append("--write-thumbnail")

        # print(cmd)
        return cmd